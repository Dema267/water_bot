import os
import logging
import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, Any

import pytz
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, Command
from aiogram import Router

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ë–î –≤ –ø—Ä–æ–¥–µ)
user_data: Dict[int, Dict[str, Any]] = {}

# –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
WATER_FACTS = [
    "–í–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 60% –º–∞—Å—Å—ã —Ç–µ–ª–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
    "–î–∞–∂–µ –ª–µ–≥–∫–æ–µ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å.",
    "–í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞.",
    "–ü–∏—Ç—å–µ –≤–æ–¥—ã –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
    "–í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–∫—Å–∏–Ω—ã –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —á–µ—Ä–µ–∑ –ø–æ—á–∫–∏.",
    "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏.",
    "–í–æ–¥–∞ —Å–º–∞–∑—ã–≤–∞–µ—Ç —Å—É—Å—Ç–∞–≤—ã –∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Ç—Ä–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ—Å—Ç—è–º–∏.",
    "–ß–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–∂–∏—Ç—å –±–µ–∑ –≤–æ–¥—ã –≤—Å–µ–≥–æ 3-5 –¥–Ω–µ–π.",
    "–í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—é –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–æ—Ä—ã.",
    "–ü–∏—Ç—å–µ –≤–æ–¥—ã –ø–µ—Ä–µ–¥ –µ–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –≤–µ—Å–∞.",
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_age = State()
    waiting_for_water_intake = State()

# –ü–æ–¥—Å—á—ë—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
def calculate_daily_water_needs(weight: float, age: int) -> float:
    base = weight * 0.033
    if age < 30:
        return base
    elif age < 55:
        return base * 0.95
    return base * 0.9

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_water_reminder(user_id: int):
    if user_id not in user_data:
        return

    user = user_data[user_id]
    now = datetime.now(pytz.utc)

    if user.get('daily_intake', 0) >= user['daily_need']:
        await bot.send_message(
            user_id,
            f"üéâ –í—ã —É–∂–µ –≤—ã–ø–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è!\n"
            f"–í—Å–µ–≥–æ: {user['daily_intake']:.1f} –ª –∏–∑ {user['daily_need']:.1f} –ª"
        )
        return

    await bot.send_message(
        user_id,
        f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã!\n"
        f"–í—ã –≤—ã–ø–∏–ª–∏ {user['daily_intake']:.1f} –ª –∏–∑ {user['daily_need']:.1f} –ª\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)"
    )
    user_data[user_id]['last_reminder'] = now

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_reminders():
    while True:
        now = datetime.now(pytz.utc)
        for user_id, user in user_data.items():
            last = user.get("last_reminder")
            if not last or (now - last) > timedelta(hours=2):
                await send_water_reminder(user_id)
        await asyncio.sleep(60)

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /help
@router.message(CommandStart())
@router.message(Command("help"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üö∞ *Water Reminder Bot*\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "/info ‚Äî –û –±–æ—Ç–µ\n"
        "/fact ‚Äî –§–∞–∫—Ç –æ –≤–æ–¥–µ\n"
        "/total ‚Äî –°–∫–æ–ª—å–∫–æ –≤—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.",
        parse_mode="Markdown"
    )

    if message.from_user.id not in user_data:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
        await state.set_state(UserStates.waiting_for_weight)

# –ö–æ–º–∞–Ω–¥–∞ /info
@router.message(Command("info"))
async def cmd_info(message: Message):
    await message.answer(
        "üíß –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –≤–æ–∑—Ä–∞—Å—Ç ‚Äî –∏ –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –Ω–æ—Ä–º—É –≤–æ–¥—ã –Ω–∞ –¥–µ–Ω—å –∏ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /fact
@router.message(Command("fact"))
async def cmd_fact(message: Message):
    fact = random.choice(WATER_FACTS)
    await message.answer(f"üíß –§–∞–∫—Ç –æ –≤–æ–¥–µ:\n\n{fact}")

# –ö–æ–º–∞–Ω–¥–∞ /total
@router.message(Command("total"))
async def cmd_total(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –∏ –≤–æ–∑—Ä–∞—Å—Ç: /start")
        return

    user = user_data[user_id]
    intake = user.get("daily_intake", 0)
    need = user["daily_need"]
    remain = max(0, need - intake)

    if intake >= need:
        text = f"üéâ –í—ã –≤—ã–ø–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {intake:.1f} –ª –∏–∑ {need:.1f} –ª"
    else:
        text = f"üíß –í—ã–ø–∏—Ç–æ: {intake:.1f} –ª –∏–∑ {need:.1f} –ª\n–û—Å—Ç–∞–ª–æ—Å—å: {remain:.1f} –ª"

    await message.answer(text)

# –í–µ—Å
@router.message(UserStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if not (1 <= weight <= 300):
            raise ValueError()
        await state.update_data(weight=weight)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(UserStates.waiting_for_age)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 70):")

# –í–æ–∑—Ä–∞—Å—Ç
@router.message(UserStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if not (1 <= age <= 120):
            raise ValueError()
        data = await state.get_data()
        weight = data["weight"]
        daily_need = calculate_daily_water_needs(weight, age)
        user_data[message.from_user.id] = {
            "weight": weight,
            "age": age,
            "daily_need": daily_need,
            "daily_intake": 0,
            "history": [],
            "last_reminder": None
        }
        await state.clear()
        await message.answer(f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {daily_need:.1f} –ª. –ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É!")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä 25):")

# –ü—Ä–∏—ë–º –≤–æ–¥—ã
@router.message(F.text.regexp(r"^\d+(\.\d+)?$"))
async def handle_water_intake(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        if user_id not in user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –≤–æ–∑—Ä–∞—Å—Ç: /start")
            return

        amount_ml = float(message.text)
        if amount_ml <= 0:
            raise ValueError()

        amount_l = amount_ml / 1000
        user = user_data[user_id]
        user["daily_intake"] += amount_l
        user["history"].append({"time": datetime.now(pytz.utc), "amount": amount_l})

        remain = max(0, user["daily_need"] - user["daily_intake"])

        if user["daily_intake"] >= user["daily_need"]:
            text = f"üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ—Ä–º—ã!\n–í—Å–µ–≥–æ: {user['daily_intake']:.1f} –ª"
        else:
            text = f"üíß –î–æ–±–∞–≤–ª–µ–Ω–æ {amount_ml} –º–ª\n–í—Å–µ–≥–æ: {user['daily_intake']:.1f} –ª\n–û—Å—Ç–∞–ª–æ—Å—å: {remain:.1f} –ª"

        await message.answer(text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä 250):")

# –ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def unknown(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    asyncio.create_task(schedule_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
